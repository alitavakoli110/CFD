    
    program ADI_Factoring
implicit none

! "parameter definition".........................................................................................
integer          :: i,imax,j,jmax
integer          :: x_intervals,y_intervals,frame
real             :: dx,dy,dt,dN,dS,dE,dW,An,As,Ae,Aw,vol
real             :: T_up,T_down,T_left,T_right
real             :: ru,cp,k,q_zegond,h1,T_inf,alfa,segma_x,segma_y
real             :: L,H
real             :: time
double precision :: time_error = 1e-2
double precision :: temprature_error = 1e-3

double precision, allocatable   :: T_history(:,:) , T_nplus(:,:) , T_nplus2(:,:)
real, dimension(:), allocatable :: a,b_prime,c,d,x
!...............................................................................................................

!  "physical properties"........................................................................................
k=1.0    ;  ru=1.0    ; cp=1.0   ;  q_zegond=2000.0
T_up=1.0 ; T_down=0.0 ; T_left=0.0 ; T_right=0.0  ; h1=5   ;T_inf=25
!..............................................................................................................

! "Grid Generation".............................................................................................
L=1.0 ; H=2.0 
x_intervals=50; y_intervals=100;

imax=x_intervals+1 ; jmax=y_intervals+1
dx=L/x_intervals 
dy=H/y_intervals

dN=dy ; dS=dy ; dE=dx ; dW=dx
An=dx ; As=dx ; Ae=dy ; Aw=dy ; vol=dx*dy
alfa= k/(ru*cp)
dt=0.01   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
segma_x= alfa*dt/dx**2
segma_y= alfa*dt/dy**2
allocate ( T_history(1:imax,1:jmax) , T_nplus(1:imax,1:jmax) , T_nplus2(1:imax,1:jmax)   )
!...............................................................................................................

! "initial condition"...........................................................................................
! initial condition for entering the "do while" loop for time marching
do i=1,imax
    do j=1,jmax
        T_history(i,j)=1.0
        T_nplus2(i,j)=0.0
    end do
end do

!...............................................................................................................

open( UNIT=1,FILE="temprature_distribution.plt", STATUS="replace", ACTION="write" )

! "starting time marching..." ..................................................................................
time=0.0
frame=0
open(3,file='point1.txt')
do while( maxval( abs (T_nplus2(1:imax,1:jmax) - T_history(1:imax,1:jmax) ) )> time_error )
    
     
print*,time,"temprature residual is",maxval( abs (T_nplus2(1:imax,1:jmax) - T_history(1:imax,1:jmax) ) )
time = time+dt

write(3,*) time,T_history(1,jmax/2) 
frame=frame+1
T_history(:,:)=T_nplus2(:,:)
! tecplot history...............................................................................................
write(1,*)'varibels="X","Y","T"'
write(1,*) 'Zone T="Time:',time,',Timeset:',dt,'"'
write(1,*) 'strandID=1, SolutionTime=',time
write(1,*) 'i=',imax, ', j=',jmax,', ZONETYPE=Ordered'
write(1,*) 'DATAPACKING=Point'

do j=1,jmax
    do i=1,imax
        write(1,*), dx*(i-1) , dy*(j-1) , T_history(i,j)
    end do
end do
!..............................................................................................................


!"STEP1 :     i SWEEP  "------------------------------------------------------------------------------------------
allocate(   a(1:imax),b_prime(1:imax),c(1:imax),d(1:imax),x(1:imax)   )

do j=2,jmax-1
 
do i=2,imax-1
   a(i)=         -0.5*segma_x
   b_prime(i)=   1.0+segma_x
   c(i)=         -0.5*segma_x
   d(i)=         0.5 * segma_y * T_history(i,j+1)  +  (1-segma_y) * T_history(i,j)   +    0.5 * segma_y * T_history(i,j-1)
end do 

! boundary conditions...
a(1)=0.0     ;  b_prime(1)=-h1-k/dx     ;  c(1)=k/dx   ;  d(1)=-h1*T_inf
  
a(imax)=-k/dx ;  b_prime(imax)=h1+k/dx  ; c(imax)=0.0 ; d(imax) =h1*T_inf 
  


call solve_tridiag(a,b_prime,c,d,x,imax)

do i=1,imax
    T_nplus(i,j)=x(i)
    
end do
T_nplus2(:,1)=T_nplus2(:,2)
T_nplus2(:,jmax)=T_nplus2(:,jmax-1)+q_zegond*dy/k

T_nplus2(1,:)=(h1*T_inf+k*T_nplus2(2,:)/dx)/(h1+k/dx)
T_nplus2(imax,:)=(h1*T_inf+k*T_nplus2(imax-1,:)/dx)/(h1+k/dx)

end do



!"STEP2  :  j SWEEP  "---------------------------------------------------------------------------------------------
deallocate(a,b_prime,c,d,x)
allocate(  a(1:jmax) , b_prime(1:jmax)  , c(1:jmax) ,  d(1:jmax)  ,  x(1:jmax)   )

do i=2,imax-1
    
do j=2,jmax-1
   a(j)=         -0.5*segma_y
   b_prime(j)=   1+segma_y
   c(j)=         -0.5*segma_y
   d(j)=         0.5 * segma_x * T_nplus(i+1,j)  +  (1-segma_x) * T_nplus(i,j)   +   0.5 * segma_x * T_nplus(i-1,j)
end do
! boundary conditions...
a(1)=0.0     ;  b_prime(1)=1.0     ;  c(1)=-1.0   ;  d(1)=0.0

a(jmax)=-k/dy  ;  b_prime(jmax)=k/dy  ; c(jmax)=0.0 ; d(jmax) =q_zegond


call solve_tridiag(a,b_prime,c,d,x,jmax)

do j=1,jmax
    T_nplus2(i,j)=x(j)
end do
T_nplus2(:,1)=T_nplus2(:,2)
T_nplus2(:,jmax)=T_nplus2(:,jmax-1)+q_zegond*dy/k

T_nplus2(1,:)=(h1*T_inf+k*T_nplus2(2,:)/dx)/(h1+k/dx)
T_nplus2(imax,:)=(h1*T_inf+k*T_nplus2(imax-1,:)/dx)/(h1+k/dx)


end do

deallocate(a,b_prime,c,d,x)
!------------------------------------------------------------------------------------------------------------------
!end do    ! End do while for TDMA
!--------------------------------------------------------------------------
end do    ! End do while for time marching

    !temperatue contour of numerical methode
    open(200,file='numerical contour unsteady.plt')
    write(200,*)"variables=x(m),y(m),T(k)"
    write(200,*)'zone t= "numerical"'
    write(200,*)"i=",imax,"j=",jmax
    write(200,*)"f=point"
    
    do j= 1,jmax
        do i= 1,imax
            write(200,*) (i-1)*dx,(j-1)*dy,t_nplus2(i,j)
        end do
        

    end do 



!/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
!/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    contains    
!                                                  ******* subroutines******
    ! TDMA ALGORITHM
    subroutine solve_tridiag(a,b,c,d,x,n)
    implicit none
    
    integer,intent(in)::n
    real,dimension(n),intent(in)::a,b,c,d
    real,dimension(n),intent(out)::x
    real,dimension(n)::cp,dp
    real::m
    integer i
    
    ! initialize c-prime and d-prime
    cp(1)=c(1)/b(1)
    dp(1)=d(1)/b(1)
    
    ! solve for vectors c-prime and d-prime
    do i=2,n
        m=b(i)-cp(i-1)*a(i)
        cp(i)=c(i)/m
        dp(i)=(d(i)-dp(i-1)*a(i))/m
    end do
    
    ! initialize x
    x(n)=dp(n)
    
    ! solve for x from the vectors c-prime and d-prime
    do i=n-1,1,-1
        x(i)=dp(i)-cp(i)*x(i+1)
    end do
    
    end subroutine solve_tridiag
!////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
!////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
end program ADI_Factoring
